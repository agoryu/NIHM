package mygeom;

import java.awt.Color;
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Vector;

import event.BlobQueue;

import widget.MTComponent;
import widget.OBB;

public class InertiaMatrix {
	private Vector<Tuple2> rawSrcPoints = new Vector<Tuple2>();
	public Vector2 V1 = new Vector2(0,0), V2 = new Vector2(0,0);
	public Vector2 V1prev = new Vector2(0,0), V2prev = new Vector2(0,0), V2init=new Vector2(0,0), V1init = new Vector2(0,0);
	double angle = 0;
	boolean inertieStarted = false;
	private Vector2 PointsCenterPrev = new Vector2(0,0);
	
	public Vector2 getShapeCenter(Vector<Tuple2> SrcPoints) {
		double sumX = 0;
		double sumY = 0;
		for (int i = 0; i < SrcPoints.size(); i++) {
			sumX += SrcPoints.elementAt(i).x;
			sumY += SrcPoints.elementAt(i).y;
		}
		return new Vector2(sumX/SrcPoints.size() , sumY/SrcPoints.size());
	}
	
	public Vector2 getShapeCenter() {
		return getShapeCenter(rawSrcPoints);
	}
	
	public void setPointList(Vector<Tuple2> rawSrcPoints) {
		inertieStarted = false;
		this.rawSrcPoints = rawSrcPoints;
	}
	
	// Calcul de la matrice de passe du monde au repère d'un segment
	// dst1 est l'"origine" du segment et tuple2 est le vecteur associé au segment
	AffineTransform computeFrame(Point2 dst1,Tuple2 tuple2) {
		AffineTransform res=new AffineTransform();
		Vector2 i=new Vector2(tuple2.x, tuple2.y);
		i.normalize();
		Point2 j=new Point2();
		j.x=-i.y;
		j.y=i.x;
		res.setTransform(i.x,i.y,j.x,j.y,dst1.x,dst1.y);
		return res;
	}

	protected double pathLength(Vector<Tuple2> points)
	{
		double length = 0;
		for (int i = 1; i < points.size(); i++)
		{
			length += distance(points.elementAt(i - 1), points.elementAt(i));
		}
		return length;
	}	
	
	protected double distance(Tuple2 p1, Tuple2 p2)
	{
		double dx = p2.x - p1.x;
		double dy = p2.y - p1.y;
		return Math.sqrt(dx * dx + dy * dy);
	}		
	
	protected Vector<Tuple2> resample(Vector<Tuple2> points, int n)
	{	
		double I = pathLength(points) / (n - 1);
		double D = 0.0;
		
		Vector<Tuple2> srcPts = new Vector<Tuple2>();
		for (int i = 0; i < points.size(); i++) {
			srcPts.add(new Tuple2(points.elementAt(i).x, points.elementAt(i).y));
		}

		Vector<Tuple2> dstPts = new Vector<Tuple2>(n);
		dstPts.addElement(new Tuple2(points.elementAt(0).x, points.elementAt(0).y));

		for (int i = 1; i < srcPts.size(); i++)
		{
			Tuple2 pt1 = (Tuple2) srcPts.elementAt(i - 1);
			Tuple2 pt2 = (Tuple2) srcPts.elementAt(i);

			double d = Math.sqrt((pt2.x-pt1.x)*(pt2.x-pt1.x) + (pt2.y-pt1.y)*(pt2.y-pt1.y));
			if ((D + d) >= I)
			{
				double qx = pt1.x + ((I - D) / d) * (pt2.x - pt1.x);
				double qy = pt1.y + ((I - D) / d) * (pt2.y - pt1.y);
				Tuple2 q = new Tuple2(qx, qy);
				dstPts.addElement(q);
				srcPts.insertElementAt(q, i);
				D = 0.0;
			}
			else
			{
				D += d;
			}
		}
		
		// hack pour pbs d'arrondis
		if (dstPts.size() == n - 1)
		{
			dstPts.addElement(srcPts.elementAt(points.size() - 1));
		}
		
		/*Vector<Tuple2> dstPts2 = new Vector<Tuple2>();
		for (int i = 0; i < dstPts.size(); i++) {
			dstPts2.add(new Tuple2(dstPts.elementAt(i).x, dstPts.elementAt(i).y));
		}*/
		
		return dstPts;
	}

	public OBB getOBB() {
		OBB obb = new OBB();
			
		// Resample pour éviter "l'accumulation de masse"
		Vector<Tuple2> resampledPoints = resample(rawSrcPoints, 64);
		
		// Calcul de la matrice d'inertie avec changement de repère pour se placer au centroïde
		double A = 0, B = 0, F = 0;
		double r1, r2;
		Vector2 V1tmp, V2tmp;
		
		Vector2 c = getShapeCenter(resampledPoints);
		for (int i = 0; i < resampledPoints.size(); i++) {
			A += (resampledPoints.elementAt(i).y - c.y) * (resampledPoints.elementAt(i).y - c.y);
			B += (resampledPoints.elementAt(i).x - c.x) * (resampledPoints.elementAt(i).x - c.x);
			F += (resampledPoints.elementAt(i).x - c.x) * (resampledPoints.elementAt(i).y - c.y);
		}
		
		r1 = (A+B+Math.sqrt((A-B)*(A-B) + 4*F*F))/2;
		r2 = (A+B-Math.sqrt((A-B)*(A-B) + 4*F*F))/2;
		
		V1tmp = new Vector2(-F, -A+r1);
		V1tmp.normalize();
		V2tmp = new Vector2(-F, -A+r2);
		V2tmp.normalize();
	
		
		// Détermination des dimensions
		// On se place dans le repère de l'OBB (repère 1, repère associé à V1tmp et avec le centre de la forme pour origine)
		// et on calcule minx, maxx, miny, maxy
		Point2 Center = new Point2(getShapeCenter(resampledPoints).x, getShapeCenter(resampledPoints).y);
		
		// 1) Calcul de la matrice de passe du repère 0 (repère du monde) au repère 1 
		AffineTransform m01 = computeFrame(Center, V1tmp);
		
		AffineTransform m10 = new AffineTransform();
		try {
			m10 = m01.createInverse();
		} catch (NoninvertibleTransformException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.exit(1);
		}
		
		DebugDraw.clear();
		Point2 centerPlusX = new Point2(Center.x + V1tmp.x*100, Center.y+ V1tmp.y*100);
		DebugDraw.add(new Segment2(Center,centerPlusX),3,Color.green,Color.green);
		Point2 centerPlusY = new Point2(Center.x + V2tmp.x*100, Center.y+ V2tmp.y*100);
		DebugDraw.add(new Segment2(Center,centerPlusY),3,Color.red,Color.red);
		
		double minX = Double.MAX_VALUE;
		double maxX = Double.MIN_VALUE;
		double minY = Double.MAX_VALUE;
		double maxY = Double.MIN_VALUE;

		Enumeration<Tuple2> e = rawSrcPoints.elements();

		Point2D pt0 = new Point2D.Double();
		Point2D p=new Point2D.Double(); // dans repère 1
		while (e.hasMoreElements())
		{
			Tuple2 pt = (Tuple2)e.nextElement(); // dans repère 0
			pt0.setLocation(pt.x, pt.y);
			m10.transform(pt0, p);

			if (p.getX() < minX)
				minX = p.getX();
			if (p.getX() > maxX)
				maxX = p.getX();

			if (p.getY() < minY)
				minY = p.getY();
			if (p.getY() > maxY)
				maxY = p.getY();
		}

		double w = maxX - minX;
		double h = maxY - minY;
	
		// On cherche l'axe principal et on affecte les dimensions de l'OBB
		// w est définie suivant l'axe principal
		Vector2 VmainAxis = new Vector2(0,0);
		if (w > h) {
			VmainAxis = V1tmp;
			obb.setDimension(w, h);
		}
		else {
			VmainAxis = V2tmp;
			obb.setDimension(h, w);
		}
		
		
		// Détermination de l'origine de l'OBB
		// Les 4 sommets de l'OBB dans le repère de l'OBB sont:
		Point2D P11 = new Point2D.Double(minX,maxY);
		Point2D P21 = new Point2D.Double(minX,minY);
		Point2D P31 = new Point2D.Double(maxX,minY);
		Point2D P41 = new Point2D.Double(maxX,maxY);
		
		// Dans le repère 0:
		Point2D P10 = new Point2D.Double();
		Point2D P20 = new Point2D.Double();
		Point2D P30 = new Point2D.Double();
		Point2D P40 = new Point2D.Double();
		m01.transform(P11, P10);
		m01.transform(P21, P20);
		m01.transform(P31, P30);
		m01.transform(P41, P40);
		
		Point2 p10 = new Point2(P10.getX(), P10.getY());
		Point2 p20 = new Point2(P20.getX(), P20.getY());
		Point2 p30 = new Point2(P30.getX(), P30.getY());
		Point2 p40 = new Point2(P40.getX(), P40.getY());
		
		// Affichage de l'OBB
		DebugDraw.add(new Segment2(p10,p20),3,Color.black,Color.black);
		DebugDraw.add(new Segment2(p20,p30),3,Color.black,Color.black);
		DebugDraw.add(new Segment2(p30,p40),3,Color.black,Color.black);
		DebugDraw.add(new Segment2(p40,p10),3,Color.black,Color.black);	
		
		// On cherche le sommet le plus proche du premier point tracé pour l'origine
		Point2 premierPoint = new Point2(rawSrcPoints.elementAt(0).x, rawSrcPoints.elementAt(0).y);

		double d1 = new Point2(p10).sub(premierPoint).norm();
		double d2 = new Point2(p20).sub(premierPoint).norm();
		double d3 = new Point2(p30).sub(premierPoint).norm();
		double d4 = new Point2(p40).sub(premierPoint).norm();
		
		Vector<Double> distances = new Vector<Double>();
		distances.add(d1);
		distances.add(d2);
		distances.add(d3);
		distances.add(d4);
		Collections.sort(distances);
		
		double dmin = distances.get(0);
		
		if (dmin == d1) obb.setOrigin(p10);
		if (dmin == d2) obb.setOrigin(p20);
		if (dmin == d3) obb.setOrigin(p30);
		if (dmin == d4) obb.setOrigin(p40);

		// On calcule enfin l'angle
		// Faut-il prendre VmainAxis ou VmainAxisNeg?
		Point2 centerPpt = (Point2) new Point2(premierPoint).sub(Center);
		Vector2 centerPremierPoint = new Vector2(centerPpt.x, centerPpt.y); 
		centerPremierPoint.normalize();

		Vector2 VmainAxisNeg = new Vector2(-VmainAxis.x, -VmainAxis.y);
		
		double angle1 = -VmainAxis.det(centerPremierPoint) * Math.acos(VmainAxis.dot(centerPremierPoint));
		double angle2 = -VmainAxisNeg.det(centerPremierPoint) * Math.acos(VmainAxisNeg.dot(centerPremierPoint));
		//System.out.println("angle1 = " + angle1*180/Math.PI + " angle2 = " + angle2*180/Math.PI);
		
		Vector2 X = new Vector2(1,0);
		
		if (angle1 > angle2) {
			obb.setAngle(X.det(VmainAxis) * Math.acos(X.dot(VmainAxis)));
		}
		else {
			VmainAxis = VmainAxisNeg;
			obb.setAngle(X.det(VmainAxisNeg) * Math.acos(X.dot(VmainAxisNeg)));
		}

		Point2 centerPlusVmainAxis = new Point2(Center.x + VmainAxis.x*50, Center.y+ VmainAxis.y*50);
		DebugDraw.add(new Segment2(Center,centerPlusVmainAxis),3,Color.orange,Color.orange);		
		
		return obb;
	}	
	
	public void computeEigenVectors() {
		double A = 0, B = 0, F = 0;
		double r1, r2;
		Vector2 V1tmp, V2tmp;
		
		Vector2 c = getShapeCenter(rawSrcPoints);
		Vector<Tuple2> resampledPoints = rawSrcPoints;// resample(rawSrcPoints, 64);
		
		for (int i = 0; i < resampledPoints.size(); i++) {
			A += (resampledPoints.elementAt(i).y - c.y) * (resampledPoints.elementAt(i).y - c.y);
			B += (resampledPoints.elementAt(i).x - c.x) * (resampledPoints.elementAt(i).x - c.x);
			F += (resampledPoints.elementAt(i).x - c.x) * (resampledPoints.elementAt(i).y - c.y);
		}
		
		r1 = (A+B+Math.sqrt((A-B)*(A-B) + 4*F*F))/2;
		r2 = (A+B-Math.sqrt((A-B)*(A-B) + 4*F*F))/2;
		
		V1tmp = new Vector2(-F, -A+r1);
		V1tmp.normalize();
		V2tmp = new Vector2(-F, -A+r2);
		V2tmp.normalize();

		V1.set(V1tmp);
		V2.set(V2tmp);
		
		if (V1.dot(V1prev) < 0) {
			//System.out.println(V1.dot(V1prev));
			V1.x *= -1;
			V1.y *= -1;
		}
		
		/*if (inertieStarted) {
			if (V1.dot(V1prev)<0) {
				V1.x *= -1;
				V1.y *= -1;
			}				
		}
		else {
			V1init.set(V1tmp);
			V2init.set(V2tmp);
			inertieStarted=true;
		}*/

		DebugDraw.clear();
		Point2 centerPlusX = new Point2(c.x + V1.x*100, c.y+ V1.y*100);
		DebugDraw.add(new Segment2(new Point2(c.x, c.y),centerPlusX),3,Color.green,Color.green);
		Point2 centerPlusY = new Point2(c.x + V2.x*100, c.y+ V2.y*100);
		DebugDraw.add(new Segment2(new Point2(c.x, c.y),centerPlusY),3,Color.red,Color.red);
		/*Point2 centerPlusV3 = new Point2(c.x + V3.x*50, c.y+ V3.y*50);
		DebugDraw.add(new Segment2(new Point2(c.x, c.y),centerPlusV3),3,Color.orange,Color.orange);			
		*/

	}	
	
	public void computeEigenVectorsFinished() {
		V1prev.set(V1);
		V2prev.set(V2);
	}
	
}



